★ 컴퍼넌트 설계 이유
  - 반복해서 사용하는 객체를 독립적인 템플릿 형태로 제작한다
  - 앱의 퍼포먼스를 향상한다. (렌더링 속도 향상)

★ 컴퍼넌트 설계 방법
  - JSX파일을 별도로 생성 (첫글자는 대문자, 파스칼케이스를 사용 ex) MyStory)
  - 컴포넌트 사용시 해당 파일을 import 해야함

★ props
  - 상위 컴퍼넌트에서 생성된 함수나 변수를 하위 컴포넌트에 전달함
  - 상위 컴퍼넌트 _n을 하위 컴퍼넌트인 CompOutput에게 prop_n으로 전달한다
    - 전달예시
    <CompOutput prop_n={_n}/>
    const CompOutput = ({prop_n}) => {
      return (
        <>
          <p>{prop_n}</p>
        </>
      );
    };

  ★ props의 상속과정을 해결하는 방법
    - redux, mobx 라이브러리
    - useReducer 훅스

★ 조건부 컴포넌트 출력
  - 조건에 따라 컴퍼넌트를 출력시에는 삼항연산자를 이용한다
  - 예시 : _init 변수가 comp1일경우 Comp1컴퍼넌트를 출력하는 방법
      {
        (_init === 'comp1') ?  <Comp1 /> : <Comp2 />
      }
  - 예시 : num 변수가 존재할 경우 버튼을 출력하는 방법 이항연산자를 이용한다
      {
        (!_num) && <button onClick={fnShowNum}>숫자 생성</button>
      }

★ useEffect (생명주기)
  - 컴포넌트가 브라우저 화면에 출력됨(mount), 스테이트가 변할때(update), 화면에서 제거 (unmount)
  - 컴퍼넌트가 마운트 되었을 때, 업데이트(state변수가 변경) 될 때마다 메시지 출력하기
    - 예시
        useEffect (()=>{
          console.log('comp1 마운트 되었습니다');
        })
  - 컴퍼넌트가 마운트 되었을 때만 메시지 출력 (deps array를 사용)
    - 예시
      useEffect (()=>{
        console.log('comp1 마운트 되었습니다');
      },[])
  - 컴퍼넌트가 언마운트 되었을 때 메시지 출력 (return의 콜백함수를 사용)
    - 예시
      useEffect(() => {
        console.log('comp1 마운트 되었습니다');
        document.querySelector('.comp1').classList.add('active')
        return (()=>{
          console.log('comp1 언마운트 되었습니다');
        })
      },[])